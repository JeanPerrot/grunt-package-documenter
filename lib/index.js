// Generated by CoffeeScript 1.8.0
(function() {
  module.exports = function(outputFile) {
    var bower, dep, doc, docDir, doc_modules, extend, fs, loadJSON, name, npm, path, _ref;
    loadJSON = function(file) {
      var error;
      try {
        return JSON.parse(fs.readFileSync(file, 'utf8'));
      } catch (_error) {
        error = _error;
        console.log("invalid json: " + file);
        return {};
      }
    };
    fs = require('fs');
    path = require('path');
    doc = outputFile;
    docDir = path.dirname(doc);
    if (!fs.existsSync(docDir)) {
      fs.mkdirSync(docDir);
    }
    extend = require('lodash').extend;
    doc_modules = function(modules_folder, rootPkg) {
      var dep, dependers, dir, dirs, outputs, pkgs, ver, _i, _len, _ref;
      dirs = fs.readdirSync(modules_folder).filter(function(dir) {
        return dir !== '.bin';
      });
      dependers = {};
      for (_i = 0, _len = dirs.length; _i < _len; _i++) {
        dir = dirs[_i];
        dependers[dir] = [];
      }
      _ref = rootPkg.dependencies;
      for (dep in _ref) {
        ver = _ref[dep];
        dependers[dep].push(rootPkg.name);
      }
      pkgs = dirs.map(function(dir) {
        var bowerFile, pkg, pkgFile;
        pkgFile = "./" + modules_folder + "/" + dir + "/package.json";
        bowerFile = "./" + modules_folder + "/" + dir + "/bower.json";
        pkg = fs.existsSync(pkgFile) ? loadJSON(pkgFile) : {};
        return pkg = extend(pkg, (fs.existsSync(bowerFile) ? loadJSON(bowerFile) : {}));
      });
      pkgs.forEach(function(pkg) {
        var dependency, _ref1, _ref2, _results;
        _ref1 = pkg.dependencies;
        _results = [];
        for (dependency in _ref1) {
          ver = _ref1[dependency];
          _results.push((_ref2 = dependers[dependency]) != null ? _ref2.push(pkg.name) : void 0);
        }
        return _results;
      });
      outputs = pkgs.map(function(pkg) {
        var deps, output, _ref1, _ref2;
        output = "\#\#\# " + pkg.name + "\n\n";
        output += "version " + ((_ref1 = pkg.version) != null ? _ref1 : 'unknown');
        if (pkg.license) {
          if (pkg.license.length) {
            output += " (" + pkg.license + " license)";
          }
          if (pkg.license.type) {
            output += " ([" + pkg.license.type + " license](" + pkg.license.url + "))";
          }
        }
        output += '\n\n';
        if (pkg.description) {
          output += "" + pkg.description + "\n\n";
        }
        if (pkg.homepage) {
          output += "[Homepage](" + pkg.homepage + ")\n\n";
        }
        deps = (function() {
          var _ref2, _results;
          _results = [];
          for (dep in (_ref2 = pkg.dependencies) != null ? _ref2 : {}) {
            _results.push(dep);
          }
          return _results;
        })();
        if (deps.length) {
          output += "\#\#\#\# Dependencies\n\n";
          output += deps.map(function(dep) {
            return "[" + dep + "](\#" + (dep.toLowerCase()) + ")";
          }).join(', ');
          output += '\n\n';
        }
        if ((_ref2 = dependers[pkg.name]) != null ? _ref2.length : void 0) {
          output += "\#\#\#\# Dependers\n\n";
          output += dependers[pkg.name].map(function(depender) {
            return "[" + depender + "](\#" + (depender.toLowerCase()) + ")";
          }).join(', ');
          output += '\n\n';
        }
        return output;
      });
      return outputs.forEach(function(output) {
        return fs.appendFileSync(doc, output, {
          encoding: 'utf8'
        });
      });
    };
    bower = fs.existsSync('./bower.json') ? loadJSON('./bower.json') : void 0;
    npm = loadJSON('./package.json');
    npm.name = name = (_ref = bower != null ? bower.name : void 0) != null ? _ref : npm.name;
    fs.writeFileSync(doc, "\# " + name + "\n\n");
    fs.appendFileSync(doc, "\#\# Direct Dependencies\n\n");
    if ((bower != null ? bower.dependencies : void 0) != null) {
      fs.appendFileSync(doc, "\#\#\# Bower\n\n");
      fs.appendFileSync(doc, ((function() {
        var _results;
        _results = [];
        for (dep in bower.dependencies) {
          _results.push(dep);
        }
        return _results;
      })()).map(function(dep) {
        return "[" + dep + "](\#" + (dep.toLowerCase()) + ")";
      }).join(', '));
      fs.appendFileSync(doc, '\n\n');
    }
    fs.appendFileSync(doc, "\#\#\# Node\n\n");
    fs.appendFileSync(doc, ((function() {
      var _results;
      _results = [];
      for (dep in npm.dependencies) {
        _results.push(dep);
      }
      return _results;
    })()).map(function(dep) {
      return "[" + dep + "](\#" + (dep.toLowerCase()) + ")";
    }).join(', '));
    fs.appendFileSync(doc, '\n\n');
    if (bower != null) {
      fs.appendFileSync(doc, '## Bower components\n\n', {
        encoding: 'utf8'
      });
      doc_modules('bower_components', bower);
    }
    fs.appendFileSync(doc, '## NodeJS modules\n\n', {
      encoding: 'utf8'
    });
    return doc_modules('node_modules', npm);
  };

}).call(this);
